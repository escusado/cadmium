{
  "name": "thulium",
  "description": "A simple, fast, and debuggable templating engine for JS (node + browser)",
  "contributors": [
    {
      "name": "Ben Beltran",
      "email": "ben@nsovocal.com",
      "url": "http://nsovocal.com"
    },
    {
      "name": "Joaquin Benitez",
      "email": "escusado@gmail.com",
      "url": "http://toily.mx"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/freshout-dev/thulium.git"
  },
  "version": "0.1.2",
  "dependencies": {
    "neon": "1.0.x"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "main": "./lib/Thulium.js",
  "readme": "# Thulium (Tm) Templating #\n\nA proper templating engine. With specs and a syntax that isn't crazy (ie. Not\nJade and not EJS).\n\nIt depends on [Neon](https://github.com/azendal/neon) for the class\nsystem.\n\n\n## Usage ##\n\nIt's easy to use. If you want it in the browser, just require the files.\nIf using node:\n\n```\n$ npm install thulium\n```\n\nFrom there, it's as easy as:\n\n```\ntm = new Thulium({template: \"A template string\"});\ntm.parseSync().renderSync(context);\n```\n\nOf course, async methods are available:\n\n```\ntm.parse(function () {\n  tm.render(context, function (view) {\n    console.log(view);\n  })\n})\n```\n\n## Examples ##\n\n### A simple template ###\n\n#### The template ####\n\n```\n<h1>Hello, <%= name %></h1>\n<% for (var i = 0; i < 10; i++) { %>\n<p> You are awesome. </p>\n<% } %>\n```\n\n\n#### The context ####\n\n```javascript\n{\n name: \"Col. Mustard\"\n}\n```\n\n#### The output ####\n\n```html\n<h1>Hello, Col. Mustard</h1>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n\n<p> You are awesome. </p>\n```\n\n### A printable helper (capture style) ###\n\n#### The template ####\n\n```\n<p>\n<%= h.reverse(function (){ %>\nThis is my reversed string.\n<% }) %>\n</p>\n```\n\n\n#### The context ####\n\n```javascript\n{\n h: {\n    reverse : function (toCapture) {\n      // Let's imagine for a second that templateManager is a reference\n      // to a ... um, template manager. That has an instance of the\n      // current view. Which is our instance of Tm\n      var buffer = templateManager.currentView.renderer.capture(toCapture);\n      return buffer.split(\"\").reverse().join(\"\");\n    }\n }\n}\n```\n\n#### The output ####\n\n```html\n<p>\n\n.gnirts desrever ym si sihT\n\n</p>\n```\n\n### A printable helper (custom style) ###\n\n#### The template ####\n\n```\n<p>\n<%= h.embolden(function (){ %>\nThis guy will be bold.\n<% }) %>\n</p>\n```\n\n\n#### The context ####\n\n```javascript\n{\n h: {\n    embolden : function (printable) {\n      // Let's imagine for a second that templateManager is a reference\n      // to a ... um, template manager. That has an instance of the\n      // current view. Which is our instance of Tm\n      templateManager.currentView.renderer.print(\"<strong>\");\n\n      // here we're printing that stuff inside the block by executing it\n      printable();\n\n      return \"</strong>\";\n    }\n }\n}\n```\n\n#### The output ####\n\n```html\n<p>\n<strong>\nThis guy will be bold.\n</strong>\n</p>\n```\n",
  "_id": "thulium@0.1.2",
  "dist": {
    "shasum": "e36d2a43ecb1520c7b2fb89a26341750dacb2e9f"
  },
  "_from": "thulium"
}
