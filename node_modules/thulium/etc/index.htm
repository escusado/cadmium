<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Thulium</title>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script src="neon/neon.js"></script>
  <script src="lithium/lithium.js"></script>
  <script src="../lib/Thulium.js"></script>
  <script type="text/tm" id="template">
    <div>
      This is the test template. If this compiles, we're all cool.

      Just <strong> Add some tags </strong> and test away.

      You can modify variables.
      <% i = 0 %>

      And print them.
      <%= i %>

      You can block the beejezus out of the template:

      <% for (i = 0; i < 10; i++) { %>
      LOL
      <% } %>

      <%= helpers.embolden(function () { %>
        This will print the output of the function. Also this text.
        <%= "Also this." %>
      <% }) %>

      <% if (true) { %>
         Hello
         <% if (true) { %>
            Also, Hello
         <% } %>
      <% } %>

      It doesn't make sense to have an equal in the bottom one. But hey! What do I know.
    </div>
  </script>
  <script>
    $(function (){
      // error engine.
      Li.Engine.error.push(function executionEngine(data) {
        console.error(data);
      });

      Li.performance = [];
      Li.nest = 0;

      // Performance enginestuff
      Li.Engine.before.push(function (data) {
        var perfObj = { 
            message : 'executing: ' + (data.spy.targetObject.className || data.scope.constructor.className) + '.' + data.spy.methodName, 
            nesting : window.top.Li.nest,
            startTime : window.top.performance.now()
        };
        window.top.Li.performance.push(perfObj);
        window.top.Li.nest++;
      });

      Li.Engine.after.push(function (data) {
          window.top.Li.nest--;
          perfObj = {
              message : 'executed: ' + (data.spy.targetObject.className || data.scope.constructor.className) + '.' + data.spy.methodName, 
              time : data.time, 
              nesting : window.top.Li.nest
          };

          window.top.Li.performance.push(perfObj);
      });

      Thulium.Parser.__objectSpy = new Li.ObjectSpy();
      Thulium.Parser.__objectSpy.spy(Thulium.Parser);
      Thulium.Parser.__objectSpy.spy(Thulium.Parser.prototype);

      Thulium.Renderer.__objectSpy = new Li.ObjectSpy();
      Thulium.Renderer.__objectSpy.spy(Thulium.Renderer);
      Thulium.Renderer.__objectSpy.spy(Thulium.Renderer.prototype);

      // Instantiate a guy.
      tm = new Thulium.Parser({template : $("#template").text()})
      context = {
        i : 12,
        helpers : {
          embolden : function (fn) {
            tm.renderer.print("<strong>");
            fn();
            return "</strong>";
          }
        }
      };

      tm.render(context);

      $("#substitution").html(tm.renderedTemplate);
    });
  </script>
</head>
<body>
  <h1>Tm Testing</h1>
  <div id="substitution">
    The template should be here maybe?
  </div>
</body>
</html>
